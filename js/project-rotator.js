{
  // Inputs/elements generated by WP plugin
  const circles = [
    document.getElementById("c1"),
    document.getElementById("c2"),
    document.getElementById("c3"),
    document.getElementById("c4"),
    document.getElementById("c5"),
    document.getElementById("c6"),
    document.getElementById("c7"),
    document.getElementById("c8"),
  ];

  const projectTitles = {
    c1: "Project Title 1",
    c2: "Project Title 2",
    c3: "Project Title 3",
    c4: "Project Title 4",
    c5: "Project Title 5",
    c6: "Project Title 6",
    c7: "Project Title 7",
    c8: "Project Title 8",
  };

  const numberOfObjects = circles.length;
  const angleIncrement = 360 / numberOfObjects;
  const radius = 490;
  const nextButton = document.getElementById("next");
  const backButton = document.getElementById("back");
  const moreButton = document.getElementById("more-button");
  const closeButton = document.getElementById("close-icon");
  const modalElement = document.getElementById("details-modal");
  const jogButtons = true;
  let roundelStops = 0; // At every 12 o'clock position
  let blockIntermediateClicks = false;

  // Distribute rondels
  for (let i = 0; i < numberOfObjects; i++) {
    const x = -1 * Math.cos(angleIncrement * i * (Math.PI / 180)) * radius;
    const y = Math.sin(angleIncrement * i * (Math.PI / 180)) * radius;
    const translate = `translate(${x.toFixed(6)} ${y.toFixed(6)})`;
    circles[i].setAttribute("transform", translate);
  }

  const toggleHighlightForwards = (htmlElement) => {
    if (htmlElement.indexOf(htmlElement[roundelStops]) > 0) {
      lastObjectHighlight = gsap.getProperty(
        htmlElement[roundelStops - 1].firstElementChild,
        "data-highlighted"
      );
      if (lastObjectHighlight == 1) {
        gsap.to(htmlElement[roundelStops - 1].firstElementChild, {
          stroke: "#f0a56e",
        });
        htmlElement[roundelStops - 1].firstElementChild.setAttribute(
          "data-highlighted",
          "0"
        );
      }
    }
    gsap.to(htmlElement[roundelStops].firstElementChild, {
      stroke: "#e76a0e",
    });
    htmlElement[roundelStops].firstElementChild.setAttribute(
      "data-highlighted",
      "1"
    );
    if (htmlElement[roundelStops].id in projectTitles) {
      const titleElement = document.getElementById("project-title");
      titleElement.textContent = projectTitles[htmlElement[roundelStops].id];
    }
  };

  const toggleHighlightBackwards = (htmlElement) => {
    lastObjectHighlight = gsap.getProperty(
      htmlElement[roundelStops - 1].firstElementChild,
      "data-highlighted"
    );
    if (lastObjectHighlight == 1) {
      gsap.to(htmlElement[roundelStops - 1].firstElementChild, {
        stroke: "#f0a56e",
      });
      htmlElement[roundelStops - 1].firstElementChild.setAttribute(
        "data-highlighted",
        "0"
      );
    }
    gsap.to(htmlElement[roundelStops - 2].firstElementChild, {
      stroke: "#e76a0e",
    });
    htmlElement[roundelStops - 2].firstElementChild.setAttribute(
      "data-highlighted",
      "1"
    );
    if (htmlElement[roundelStops - 2].id in projectTitles) {
      const titleElement = document.getElementById("project-title");
      titleElement.textContent =
        projectTitles[htmlElement[roundelStops - 2].id];
    }
  };

  const offsetByArbitraryRotation = (htmlElement, angle) => {
    gsap.to(htmlElement, {
      transformOrigin: "center center",
      rotation: angle,
      duration: 0.75,
    });
  };

  const offsetRotationForwards = (htmlElement) => {
    gsap.to(htmlElement, {
      transformOrigin: "center center",
      rotation: `-=${angleIncrement}`,
      duration: 0.75,
    });
  };

  const offsetRotationBackwards = (htmlElement) => {
    gsap.to(htmlElement, {
      transformOrigin: "center center",
      rotation: `+=${angleIncrement}`,
      duration: 0.75,
    });
  };

  const jogForwards = () => {
    if (roundelStops < numberOfObjects) {
      if (blockIntermediateClicks == false) {
        blockIntermediateClicks = true;
        gsap.to("#roundels", {
          transformOrigin: "center center",
          rotation: `+=${angleIncrement}`,
          duration: 0.75,
          onComplete: () => {
            blockIntermediateClicks = false;
            toggleHighlightForwards(circles);
            roundelStops += 1;
            disableIndicatorForwards("control-button-disabled");
          },
        });
        offsetRotationForwards("g[data-project-roundel]");
      }
    }
  };

  const disableIndicatorForwards = (selector) => {
    resetStroke(backButton, selector);
    if (roundelStops == numberOfObjects) {
      nextButton.classList.add(selector);
    }
  };

  const jogBackwards = () => {
    if (roundelStops > 1) {
      if (blockIntermediateClicks == false) {
        blockIntermediateClicks = true;
        gsap.to("#roundels", {
          transformOrigin: "center center",
          rotation: `-=${angleIncrement}`,
          duration: 0.75,
          onComplete: () => {
            blockIntermediateClicks = false;
            toggleHighlightBackwards(circles);
            roundelStops -= 1;
            disableIndicatorBackwards("control-button-disabled");
          },
        });
        offsetRotationBackwards("g[data-project-roundel]");
      }
    }
  };

  const disableIndicatorBackwards = (selector) => {
    resetStroke(nextButton, selector);
    if (roundelStops == 1) {
      backButton.classList.add(selector);
    }
  };

  const resetStroke = (buttonElement, selector) => {
    if (buttonElement.classList.contains(selector)) {
      buttonElement.classList.remove(selector);
    }
  };

  const registerJogControls = () => {
    if (jogButtons) {
      nextButton.addEventListener("click", jogForwards);
      backButton.addEventListener("click", jogBackwards);
    }
    Observer.create({
      target: window,
      type: "wheel, touch",
      onUp: jogBackwards,
      onDown: jogForwards,
    });
  };

  const openModal = () => {
    gsap.to(modalElement, {
      opacity: 1,
      onStart: () => {
        modalElement.classList.remove("modal-hidden");
      },
    });
  };

  const registerMoreButton = () => {
    moreButton.addEventListener("click", openModal);
  };

  const closeModal = () => {
    gsap.to(modalElement, {
      opacity: 0,
      onComplete: () => {
        modalElement.classList.add("modal-hidden");
      },
    });
  };

  const registerCloseModal = () => {
    closeButton.addEventListener("click", closeModal);
  };

  const alignFirstRoundelTo12oClock = () => {
    gsap.to("#roundels", {
      transformOrigin: "center center",
      rotation: 90,
      duration: 1,
      onComplete: () => {
        registerJogControls();
        registerMoreButton();
        registerCloseModal();
        toggleHighlightForwards(circles);
        roundelStops += 1;
      },
    });
    offsetByArbitraryRotation("g[data-project-roundel]", -90);
  };

  alignFirstRoundelTo12oClock();
}
